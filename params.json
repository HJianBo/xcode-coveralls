{"name":"xcode-coveralls","tagline":"coveralls.io support for Xcode","body":"xcode-coveralls\r\n===============\r\n\r\n[![Build Status](https://img.shields.io/travis/macmade/xcode-coveralls.svg?branch=master&style=flat)](https://travis-ci.org/macmade/xcode-coveralls)\r\n[![Coverage Status](https://img.shields.io/coveralls/macmade/xcode-coveralls.svg?branch=master&style=flat)](https://coveralls.io/r/macmade/xcode-coveralls)\r\n[![Issues](http://img.shields.io/github/issues/macmade/xcode-coveralls.svg?style=flat)](https://github.com/macmade/xcode-coveralls/issues)\r\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg?style=flat)\r\n![License](https://img.shields.io/badge/license-mit-brightgreen.svg?style=flat)\r\n[![Contact](https://img.shields.io/badge/contact-@macmade-blue.svg?style=flat)](https://twitter.com/macmade)\r\n\r\nAbout\r\n-----\r\n\r\n`xcode-coveralls` is a command line helper tool to upload code coverage data from Xcode projects to [coveralls.io](https://coveralls.io).\r\n\r\nUsage\r\n-----\r\n\r\nThe `xcode-coveralls` command needs to be invoked from your **repository/project root directory**.  \r\nNote that if your Xcode project file is in a sub directory, you'll need to specify its path with the `--project` option.\r\n\r\nIf you don't use [Travis CI](http://travis-ci.org), you may also specify a service name and job ID with the `--service` and `--id` options. \r\nBuilds on [Travis CI](http://travis-ci.org) will automatically detect those values.   \r\nYou may also use the `--token` option, if you're not using a service compatible with [coveralls.io](https://coveralls.io).\r\n\r\nYou may also include/exclude specific paths from your sources with the `--include` and `--exclude` options.  \r\nThose paths may be full paths or paths relative to the repository/project root directory.\r\n\r\nThe only mandatory argument is the Xcode build directory, containing the `.gcda` and `.gcno` files to process.  \r\nPlease read the following section to learn how to generate those files with Xcode.\r\n\r\nProject Configuration\r\n---------------------\r\n\r\nIn order to use `xcode-coveralls`, your Xcode targets needs to be configured to produce code coverage data files.\r\n\r\nThis can be done from a target's build settings.  \r\nTwo options needs to be activated:\r\n\r\n - **Generate Test Coverage Files** (`GCC_GENERATE_TEST_COVERAGE_FILES`)\r\n - **Instrument Program Flow** (`GCC_INSTRUMENT_PROGRAM_FLOW_ARCS`)\r\n\r\nAlthough the options are prefixed with `GCC`, they are completely compatible with Clang/LLVM.\r\n\r\nNote that turning those options on will reduce the compilation time, so you might create a specific build configuration for this, and enable it for your unit tests only.\r\n\r\n### Build Directory\r\n\r\nThe `xcode-coveralls` command needs to be invoked with the Xcode build directory, usually in `~/Library/Developer/Xcode/DerivedData/`.\r\n\r\nThe best way to get this directory is to add a **Run Script** phase in the target for which you want coverage reports:\r\n\r\n    export | egrep '(BUILT_PRODUCTS_DIR)|(CURRENT_ARCH)|(OBJECT_FILE_DIR_normal)|(SRCROOT)|(OBJROOT)' > xcenv.sh\r\n\r\nThis will create an `xcenv.sh` file with the necessary environment variables to find the Xcode build directory.  \r\nIf using an version control system, you may ignore this specific file.\r\n\r\nYou may then use this variables in a shell script, in order to invoke `xcode-coveralls`:\r\n\r\n    #!/bin/bash\r\n    \r\n    source xcenv.sh\r\n    declare -r DIR_BUILD=\"${OBJECT_FILE_DIR_normal}/${CURRENT_ARCH}/\"\r\n    xcode-coveralls \"${DIR_BUILD}\"\r\n\r\nCommand Options\r\n---------------\r\n\r\n    Usage: xcode-coveralls [OPTIONS] BUILD_DIRECTORY [BUILD_DIRECTORY ...]\r\n    \r\n    Options:\r\n        \r\n        --help       Shows this help dialog\r\n        --version    Prints the version number\r\n        --verbose    Turns on extra logging\r\n        --gcov       Path or command for invoking the gcov utility\r\n                     (defaults to /usr/bin/gcov)\r\n        --include    Paths to include from the sources\r\n        --exclude    Paths to exclude from the sources\r\n        --project    Path to the Xcode project file, if not at the directory root\r\n        --service    The service name to use\r\n                     (defaults to 'travis-ci')\r\n        --id         The service job ID\r\n                     (if not specified, defaults to the 'TRAVIS_JOB_ID' environment variable, or zero)\r\n        --token      The repository token (optional)\r\n        --dry-run    Do not actually send data to coveralls.io\r\n\r\nInstallation\r\n------------\r\n\r\n`xcode-coveralls` may be installed by cloning its [GitHub repository](https://github.com/macmade/xcode-coveralls) and running `xcodebuild` or `xctool`.\r\n\r\nThe default location is `/usr/local/bin`.\r\n\r\nHere's an example with `xcodebuild`:\r\n    \r\n    git clone https://github.com/macmade/xcode-coveralls.git /tmp/xcode-coveralls\r\n    xcodebuild -project /tmp/xcode-coveralls/xcode-coveralls.xcodeproj -scheme xcode-coveralls DSTROOT=/ SYMROOT=build install\r\n\r\nAnd here's an example with `xctool`:\r\n\r\n    git clone https://github.com/macmade/xcode-coveralls.git /tmp/xcode-coveralls\r\n    sudo xctool --project /tmp/xcode-coveralls/xcode-coveralls.xcodeproj --scheme xcode-coveralls DSTROOT=/ install\r\n    \r\nNote that you can use this on Travis builds (for instance in `before_install`) in order to get coverage reports for your project.\r\n\r\nLicense\r\n-------\r\n\r\nxcode-coveralls is released under the terms of the MIT License.\r\n\r\nRepository Infos\r\n----------------\r\n\r\n    Owner:\t\t\tJean-David Gadina - XS-Labs\r\n    Web:\t\t\twww.xs-labs.com\r\n    Blog:\t\t\twww.noxeos.com\r\n    Twitter:\t\t@macmade\r\n    GitHub:\t\t\tgithub.com/macmade\r\n    LinkedIn:\t\tch.linkedin.com/in/macmade/\r\n    StackOverflow:\tstackoverflow.com/users/182676/macmade\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}